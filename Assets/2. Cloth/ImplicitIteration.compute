// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//#pragma enable_d3d11_debug_symbols
//#pragma pack_matrix(row_major)

struct AdjacencyData {
    int4x4 Id;
    float4x4 Length;
};

StructuredBuffer<float3> VerticesPositionIn;
StructuredBuffer<float3> VerticesPositionInHat;
RWStructuredBuffer<float3> VerticesPositionInOld;
RWStructuredBuffer<float3> VerticesPositionOut;
StructuredBuffer<AdjacencyData> VerticesAdjacency;

float omega = 1, dt = 0.015f, spring_k = 8000;
float inv_H = 2.743902e-05f; // 1 / (1 / dt / dt + 4 * spring_k)

inline float3 Get_Gradient(int id, float3 X, float3 X_hat) {
    if (id == 0 || id == 20)
    return float3(0, 0, 0);
    float3 G = (X - X_hat) / dt / dt - float3(0, -9.81, 0);

    for (uint i = 0; i < 16; i++) {
        int k = VerticesAdjacency[id].Id[i % 4][i / 4];
        float L = VerticesAdjacency[id].Length[i % 4][i / 4];
        if (k == - 1 || L == 0) break;

        float3 t = X - VerticesPositionIn[k];
        float3 f = spring_k * (1 - L / length(t)) * t;
        G += f;
    }

    return G;
}

[numthreads(64, 1, 1)]
void CSMain (uint3 ID : SV_DispatchThreadID) {
    uint id = ID.x, size = 0, _ = 0;
    VerticesPositionIn.GetDimensions(size, _);
    if (id >= size) return;
    float3 X = VerticesPositionIn[id];
    float3 X_hat = VerticesPositionInHat[id];
    float3 last_X = VerticesPositionInOld[id], G = 0;
    //printf("X: %f %f %f\n", X.x, X.y, X.z);

    G = Get_Gradient(id, X, X_hat);

    VerticesPositionInOld[id] = X;
    X -= G * inv_H;
    X = omega * X + (1 - omega) * last_X;

    VerticesPositionOut[id] = X;
}
